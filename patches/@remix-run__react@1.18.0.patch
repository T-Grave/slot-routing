diff --git a/dist/components.d.ts b/dist/components.d.ts
index 3d87014c69fa75012a0705378b203d36fc465a00..0d6d56d1597d4081cf7a0f77dfd7df2e5e2ae402 100644
--- a/dist/components.d.ts
+++ b/dist/components.d.ts
@@ -1,11 +1,14 @@
 import * as React from "react";
+import type { RouterState, DataRouterContextObject } from "react-router";
 import type { LinkProps, NavLinkProps, FormProps, Params, SubmitFunction } from "react-router-dom";
 import type { SerializeFrom } from "@remix-run/server-runtime";
 import type { AppData } from "./data";
 import type { RemixContextObject } from "./entry";
 import type { PrefetchPageDescriptor } from "./links";
 import type { Transition, Fetcher } from "./transition";
+
 export declare const RemixContext: React.Context<RemixContextObject | undefined>;
+export declare function useRemixContext(): RemixContextObject;
 export declare function RemixRoute({ id }: {
     id: string;
 }): JSX.Element;
diff --git a/dist/components.js b/dist/components.js
index d818dad4ce6f197c0b122816cee59bfe4f493986..48d2f57b79cdd15953feb84ef5620e18c9d7ba58 100644
--- a/dist/components.js
+++ b/dist/components.js
@@ -716,7 +716,7 @@ function Scripts(props) {
     }).join("\n") + (deferredScripts.length > 0 ? `__remixContext.a=${deferredScripts.length};` : "");
     let routeModulesScript = !isStatic ? " " : `${(_manifest$hmr = manifest.hmr) !== null && _manifest$hmr !== void 0 && _manifest$hmr.runtime ? `import ${JSON.stringify(manifest.hmr.runtime)};` : ""}import ${JSON.stringify(manifest.url)};
 ${matches.map((match, index) => `import * as route${index} from ${JSON.stringify(manifest.routes[match.route.id].module)};`).join("\n")}
-window.__remixRouteModules = {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(",")}};
+window.__remixRouteModules = Object.assign({}, window.__remixRouteModules, {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(",")}});
 
 import(${JSON.stringify(manifest.entry.module)});`;
     return /*#__PURE__*/React__namespace.createElement(React__namespace.Fragment, null, /*#__PURE__*/React__namespace.createElement("script", _rollupPluginBabelHelpers["extends"]({}, props, {
@@ -1420,6 +1420,7 @@ exports.Meta = Meta;
 exports.NavLink = NavLink;
 exports.PrefetchPageLinks = PrefetchPageLinks;
 exports.RemixContext = RemixContext;
+exports.useRemixContext = useRemixContext;
 exports.RemixRoute = RemixRoute;
 exports.RemixRouteError = RemixRouteError;
 exports.Scripts = Scripts;
diff --git a/dist/esm/components.js b/dist/esm/components.js
index f2a540d17fafb27efc0145f1a1f8458bd316d31b..18bcda884520e1778f230a5fa6716cbc5c092c04 100644
--- a/dist/esm/components.js
+++ b/dist/esm/components.js
@@ -692,7 +692,7 @@ function Scripts(props) {
     }).join("\n") + (deferredScripts.length > 0 ? `__remixContext.a=${deferredScripts.length};` : "");
     let routeModulesScript = !isStatic ? " " : `${(_manifest$hmr = manifest.hmr) !== null && _manifest$hmr !== void 0 && _manifest$hmr.runtime ? `import ${JSON.stringify(manifest.hmr.runtime)};` : ""}import ${JSON.stringify(manifest.url)};
 ${matches.map((match, index) => `import * as route${index} from ${JSON.stringify(manifest.routes[match.route.id].module)};`).join("\n")}
-window.__remixRouteModules = {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(",")}};
+window.__remixRouteModules = Object.assign({}, window.__remixRouteModules, {${matches.map((match, index) => `${JSON.stringify(match.route.id)}:route${index}`).join(",")}});
 
 import(${JSON.stringify(manifest.entry.module)});`;
     return /*#__PURE__*/React.createElement(React.Fragment, null, /*#__PURE__*/React.createElement("script", _extends({}, props, {
@@ -1388,4 +1388,4 @@ function mergeRefs(...refs) {
   };
 }
 
-export { Await, Link, Links, LiveReload, Meta, NavLink, PrefetchPageLinks, RemixContext, RemixRoute, RemixRouteError, Scripts, composeEventHandlers, useActionData, useFetcher, useFetchers, useLoaderData, useMatches, useTransition };
+export { Await, Link, Links, LiveReload, Meta, NavLink, PrefetchPageLinks, RemixContext, RemixRoute, RemixRouteError, Scripts, composeEventHandlers, useActionData, useFetcher, useFetchers, useLoaderData, useMatches, useTransition, useRemixContext };
diff --git a/dist/esm/index.js b/dist/esm/index.js
index 08846c4605214228051c9ba21216a70dc8d015c3..78d9d96ec3361aab8c2cb74597401cc98ec77d60 100644
--- a/dist/esm/index.js
+++ b/dist/esm/index.js
@@ -10,7 +10,8 @@
  */
 export { RemixBrowser } from './browser.js';
 export { Form, Outlet, isRouteErrorResponse, unstable_useBlocker, unstable_usePrompt, useAsyncError, useAsyncValue, useBeforeUnload, useFormAction, useHref, useLocation, useMatch, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useSearchParams, useSubmit } from 'react-router-dom';
-export { Await, Link, Links, LiveReload, Meta, NavLink, PrefetchPageLinks, Scripts, RemixContext as UNSAFE_RemixContext, useActionData, useFetcher, useFetchers, useLoaderData, useMatches, useTransition } from './components.js';
-export { useCatch } from './errorBoundaries.js';
+export { Await, Link, Links, LiveReload, Meta, NavLink, PrefetchPageLinks, Scripts, RemixContext as UNSAFE_RemixContext, useActionData, useFetcher, useFetchers, useLoaderData, useMatches, useTransition, useRemixContext as PATCHED_useRemixContext } from './components.js';
+export { useCatch, RemixErrorBoundary as PATCHED_RemixErrorBoundary, RemixRootDefaultErrorBoundary as PATCHED_RemixRootDefaultErrorBoundary } from './errorBoundaries.js';
 export { ScrollRestoration } from './scroll-restoration.js';
 export { RemixServer } from './server.js';
+export { createClientRoutes as PATCHED_createClientRoutes } from './routes.js';
diff --git a/dist/index.d.ts b/dist/index.d.ts
index e16d76beb57831a7a4f2032e44bb2c82a383f434..90d719589e5f841ea82fc60fdd6e141ba94984f8 100644
--- a/dist/index.d.ts
+++ b/dist/index.d.ts
@@ -3,9 +3,9 @@ export { RemixBrowser } from "./browser";
 export type { FormEncType, FormMethod, FormProps, Location, NavigateFunction, Params, Path, ShouldRevalidateFunction, SubmitFunction, SubmitOptions, unstable_Blocker, unstable_BlockerFunction, } from "react-router-dom";
 export { Form, Outlet, useAsyncError, useAsyncValue, isRouteErrorResponse, useBeforeUnload, useFormAction, useHref, useLocation, useMatch, useNavigate, useNavigation, useNavigationType, useOutlet, useOutletContext, useParams, useResolvedPath, useRevalidator, useRouteError, useRouteLoaderData, useSearchParams, useSubmit, unstable_useBlocker, unstable_usePrompt, } from "react-router-dom";
 export type { AwaitProps, FetcherWithComponents, RouteMatch, RemixNavLinkProps as NavLinkProps, RemixLinkProps as LinkProps, } from "./components";
-export { Await, Meta, Links, Scripts, Link, NavLink, PrefetchPageLinks, LiveReload, useTransition, useFetcher, useFetchers, useLoaderData, useMatches, useActionData, RemixContext as UNSAFE_RemixContext, } from "./components";
+export { Await, Meta, Links, Scripts, Link, NavLink, PrefetchPageLinks, LiveReload, useTransition, useFetcher, useFetchers, useLoaderData, useMatches, useActionData, RemixContext as UNSAFE_RemixContext, useRemixContext as PATCHED_useRemixContext,} from "./components";
 export type { ThrownResponse } from "./errors";
-export { useCatch } from "./errorBoundaries";
+export { useCatch, RemixErrorBoundary as PATCHED_RemixErrorBoundary, RemixRootDefaultErrorBoundary as PATCHED_RemixRootDefaultErrorBoundary, } from "./errorBoundaries";
 export type { HtmlLinkDescriptor } from "./links";
 export type { CatchBoundaryComponent, HtmlMetaDescriptor, V2_MetaArgs, V2_MetaDescriptor, V2_MetaFunction, RouteModules as UNSAFE_RouteModules, ShouldReloadFunction, } from "./routeModules";
 export { ScrollRestoration } from "./scroll-restoration";
@@ -13,4 +13,5 @@ export type { RemixServerProps } from "./server";
 export { RemixServer } from "./server";
 export type { Fetcher } from "./transition";
 export type { FutureConfig as UNSAFE_FutureConfig, AssetsManifest as UNSAFE_AssetsManifest, RemixContextObject as UNSAFE_RemixContextObject, } from "./entry";
-export type { EntryRoute as UNSAFE_EntryRoute, RouteManifest as UNSAFE_RouteManifest, } from "./routes";
+export type { EntryRoute as UNSAFE_EntryRoute, RouteManifest as UNSAFE_RouteManifest,  } from "./routes";
+export { createClientRoutes as PATCHED_createClientRoutes } from "./routes";
\ No newline at end of file
diff --git a/dist/index.js b/dist/index.js
index 0218e81d4f2e1a86771874e261489b96ee986556..936a4565bcaea1608b230019fdd8be3fe7933146 100644
--- a/dist/index.js
+++ b/dist/index.js
@@ -18,6 +18,7 @@ var components = require('./components.js');
 var errorBoundaries = require('./errorBoundaries.js');
 var scrollRestoration = require('./scroll-restoration.js');
 var server = require('./server.js');
+var routes = require('./routes.js');
 
 
 
@@ -136,3 +137,7 @@ exports.useTransition = components.useTransition;
 exports.useCatch = errorBoundaries.useCatch;
 exports.ScrollRestoration = scrollRestoration.ScrollRestoration;
 exports.RemixServer = server.RemixServer;
+exports.PATCHED_useRemixContext = components.useRemixContext;
+exports.PATCHED_createClientRoutes = routes.createClientRoutes;
+exports.PATCHED_RemixErrorBoundary = errorBoundaries.RemixErrorBoundary;
+exports.PATCHED_RemixRootDefaultErrorBoundary = errorBoundaries.RemixRootDefaultErrorBoundary;